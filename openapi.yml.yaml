openapi: 3.0.0
info:
  title: Game API
  description: "API for managing game entities like users, characters, battles, inventory,\
    \ and a single store."
  version: 1.0.0
servers:
- url: http://localhost:5000/api/v1
paths:
  /users:
    get:
      summary: Get a list of users
      parameters:
      - name: limit
        in: query
        description: Maximum number of users to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 10
      - name: offset
        in: query
        description: Offset for pagination
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{userId}:
    get:
      summary: Get a specific user by ID
      parameters:
      - name: userId
        in: path
        description: The ID of the user to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: User not found
  /characters:
    get:
      summary: Get a list of characters
      parameters:
      - name: limit
        in: query
        description: Maximum number of characters to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 10
      - name: offset
        in: query
        description: Offset for pagination
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      responses:
        "200":
          description: A list of characters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Character'
    post:
      summary: Create a new character
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Character'
        required: true
      responses:
        "201":
          description: Character created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
  /battles:
    get:
      summary: Get a list of battles
      parameters:
      - name: characterId
        in: query
        description: Filter battles by character ID
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: limit
        in: query
        description: Maximum number of battles to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 10
      - name: offset
        in: query
        description: Offset for pagination
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      responses:
        "200":
          description: A list of battles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Battle'
    post:
      summary: Create a new battle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Battle'
        required: true
      responses:
        "201":
          description: Battle created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Battle'
  /inventory:
    get:
      summary: Get a list of inventories
      parameters:
      - name: userId
        in: query
        description: Filter inventories by user ID
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: limit
        in: query
        description: Maximum number of inventories to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 10
      - name: offset
        in: query
        description: Offset for pagination
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      responses:
        "200":
          description: A list of inventories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Inventory'
    post:
      summary: Create a new inventory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Inventory'
        required: true
      responses:
        "201":
          description: Inventory created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
  /store:
    get:
      summary: Get the list of items in the store
      responses:
        "200":
          description: A list of items available in the store
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
    post:
      summary: Add an item to the store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        "201":
          description: Item added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
  /store/purchase:
    post:
      summary: Purchase an item from the store
      parameters:
      - name: userId
        in: query
        description: The ID of the user making the purchase
        required: true
        style: form
        explode: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/store_purchase_body'
        required: true
      responses:
        "200":
          description: Purchase successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: "Bad request (insufficient funds, item not available, etc.)"
        "404":
          description: Item not found
  /quests:
    get:
      summary: Get a list of quests
      parameters:
      - name: limit
        in: query
        description: Maximum number of quests to return
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 10
      - name: offset
        in: query
        description: Offset for pagination
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      responses:
        "200":
          description: A list of quests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Quest'
    post:
      summary: Create a new quest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quest'
        required: true
      responses:
        "201":
          description: Quest created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quest'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
    Character:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        level:
          type: integer
        user_id:
          type: integer
    Battle:
      type: object
      properties:
        id:
          type: integer
        character1_id:
          type: integer
        character2_id:
          type: integer
        winner_id:
          type: integer
    Inventory:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        items:
          type: array
          items:
            type: string
    Item:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
    Quest:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        rewards:
          type: array
          items:
            type: string
    store_purchase_body:
      type: object
      properties:
        itemId:
          type: integer
          description: ID of the item being purchased
        quantity:
          type: integer
          description: Quantity of the item to be purchased
        price:
          type: number
          description: Total price of the purchase
    inline_response_200:
      type: object
      properties:
        message:
          type: string
        balance_remaining:
          type: number
          description: Remaining balance of the user after the purchase
