"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[5428],{76903:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docsSidebar":[{"type":"link","label":"Introduction","href":"/project-ai-study-rpg-game/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Requirements Specification","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"System Overview","href":"/project-ai-study-rpg-game/docs/requirements/system-overview","docId":"requirements/system-overview","unlisted":false},{"type":"link","label":"System Block Diagram","href":"/project-ai-study-rpg-game/docs/requirements/system-block-diagram","docId":"requirements/system-block-diagram","unlisted":false},{"type":"link","label":"General Requirements","href":"/project-ai-study-rpg-game/docs/requirements/general-requirements","docId":"requirements/general-requirements","unlisted":false},{"type":"link","label":"Features and Requirements","href":"/project-ai-study-rpg-game/docs/requirements/features-and-requirements","docId":"requirements/features-and-requirements","unlisted":false},{"type":"link","label":"Use-case descriptions","href":"/project-ai-study-rpg-game/docs/requirements/use-case-descriptions","docId":"requirements/use-case-descriptions","unlisted":false}],"href":"/project-ai-study-rpg-game/docs/category/requirements-specification"},{"type":"category","label":"System Architecture","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"design","href":"/project-ai-study-rpg-game/docs/system-architecture/design","docId":"system-architecture/design","unlisted":false},{"type":"link","label":"Class Diagrams","href":"/project-ai-study-rpg-game/docs/system-architecture/classDiagrams","docId":"system-architecture/classDiagrams","unlisted":false},{"type":"link","label":"Development Environment","href":"/project-ai-study-rpg-game/docs/system-architecture/development-environment","docId":"system-architecture/development-environment","unlisted":false},{"type":"link","label":"Version Control","href":"/project-ai-study-rpg-game/docs/system-architecture/version-control","docId":"system-architecture/version-control","unlisted":false},{"type":"link","label":"Component Descriptions","href":"/project-ai-study-rpg-game/docs/system-architecture/componentDescriptions","docId":"system-architecture/componentDescriptions","unlisted":false}],"href":"/project-ai-study-rpg-game/docs/category/system-architecture"},{"type":"category","label":"API Specification","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Design Document - Part II API","href":"/project-ai-study-rpg-game/docs/api-specification/design-api-intro","docId":"api-specification/design-api-intro","unlisted":false},{"type":"link","label":"API 1 - AI Study RPG","href":"/project-ai-study-rpg-game/docs/api-specification/openapi-spec","docId":"api-specification/openapi-spec","unlisted":false},{"type":"link","label":"CalculatorModel.java","href":"/project-ai-study-rpg-game/docs/api-specification/calculator-model-generated","docId":"api-specification/calculator-model-generated","unlisted":false}],"href":"/project-ai-study-rpg-game/docs/category/api-specification"},{"type":"category","label":"Test Procedures","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Backend unit tests","href":"/project-ai-study-rpg-game/docs/testing/backend-unit-testing","docId":"testing/backend-unit-testing","unlisted":false},{"type":"link","label":"Frontend unit tests","href":"/project-ai-study-rpg-game/docs/testing/frontend-unit-testing","docId":"testing/frontend-unit-testing","unlisted":false},{"type":"link","label":"Integration tests","href":"/project-ai-study-rpg-game/docs/testing/integration-testing","docId":"testing/integration-testing","unlisted":false},{"type":"link","label":"Acceptance test","href":"/project-ai-study-rpg-game/docs/testing/acceptence-testing","docId":"testing/acceptence-testing","unlisted":false}],"href":"/project-ai-study-rpg-game/docs/category/test-procedures"}]},"docs":{"api-specification/calculator-model-generated":{"id":"api-specification/calculator-model-generated","title":"CalculatorModel.java","description":"(generated using Javadoc to Markdown)","sidebar":"docsSidebar"},"api-specification/design-api-intro":{"id":"api-specification/design-api-intro","title":"Design Document - Part II API","description":"What should be in this section.","sidebar":"docsSidebar"},"api-specification/openapi-spec":{"id":"api-specification/openapi-spec","title":"API 1 - AI Study RPG","description":"API Specification from openapi.yml","sidebar":"docsSidebar"},"intro":{"id":"intro","title":"Introduction","description":"","sidebar":"docsSidebar"},"requirements/features-and-requirements":{"id":"requirements/features-and-requirements","title":"Features and Requirements","description":"- The application will require the user to have a Canvas account.","sidebar":"docsSidebar"},"requirements/general-requirements":{"id":"requirements/general-requirements","title":"General Requirements","description":"Android or IOS","sidebar":"docsSidebar"},"requirements/system-block-diagram":{"id":"requirements/system-block-diagram","title":"System Block Diagram","description":"This system block diagram illustrates the flow and interaction between different components of the AI Study RPG project. Users interact with the frontend (built with React) to log in, view assignments, and customize their avatars. The frontend communicates with the backend (Python) for data processing, which integrates with the Canvas API to gather assignments and deadlines. The backend also uses ChatGPT for prioritizing tasks and gamifying the user\'s experience. A SQL database stores and retrieves user-related data, such as avatar details and progress, supporting both data storage and display functionalities in the system.","sidebar":"docsSidebar"},"requirements/system-overview":{"id":"requirements/system-overview","title":"System Overview","description":"The AI Study RPG Organizer will use the Canvas API and ChatGPT to streamline the assignment process and enhance student engagement through gamification of coursework. This application is catered to students who often struggle with organizing, prioritizing, and finishing assignments. The software will integrate Canvas API  by gathering students\u2019 assignments, deadlines, and coursework details. Once all of this data has been collected, it will then pass information to ChatGPT to classify, and help prioritize specific assignments. The AI will sort assignments based on different criteria such as difficulty, due dates, and the amount of effort to complete an assignment. The difficulty will be calculated by the length of the due date for the assignment and effort required to finish a task.","sidebar":"docsSidebar"},"requirements/use-case-descriptions":{"id":"requirements/use-case-descriptions","title":"Use-case descriptions","description":"A student wants to finish a large assignment. (Boss battle)","sidebar":"docsSidebar"},"system-architecture/classDiagrams":{"id":"system-architecture/classDiagrams","title":"Class Diagrams","description":"Front End Class Diagram","sidebar":"docsSidebar"},"system-architecture/componentDescriptions":{"id":"system-architecture/componentDescriptions","title":"Component Descriptions","description":"Descriptions of each component used by the app","sidebar":"docsSidebar"},"system-architecture/design":{"id":"system-architecture/design","title":"design","description":"Purpose","sidebar":"docsSidebar"},"system-architecture/development-environment":{"id":"system-architecture/development-environment","title":"Development Environment","description":"","sidebar":"docsSidebar"},"system-architecture/version-control":{"id":"system-architecture/version-control","title":"Version Control","description":"","sidebar":"docsSidebar"},"testing/acceptence-testing":{"id":"testing/acceptence-testing","title":"Acceptance test","description":"Demonstration of all of the functional and non-functional requirements. This can be a combination of automated tests derived from the use-cases (user stories) and manual tests with recorded observation of the results.","sidebar":"docsSidebar"},"testing/backend-unit-testing":{"id":"testing/backend-unit-testing","title":"Backend unit tests","description":"Overview","sidebar":"docsSidebar"},"testing/frontend-unit-testing":{"id":"testing/frontend-unit-testing","title":"Frontend unit tests","description":"Frontend Unit Tests for React Components","sidebar":"docsSidebar"},"testing/integration-testing":{"id":"testing/integration-testing","title":"Integration tests","description":"Tests to demonstrate each use-case based on the use-case descriptions and the sequence diagrams. External input should be provided via mock objects and results verified via mock objects. Integration tests should not require manual entry of data nor require manual interpretation of results.","sidebar":"docsSidebar"}}}}')}}]);